/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2024 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

import _ from 'lodash'

import { getResourceUrl } from '@/utils/helper'

export const defaultJoditConfig = {
  // all options from https://xdsoft.net/jodit/docs/options.html
  readonly: false,
  placeholder: 'Start typing...',
  /**
   * The internal styles of the editable area. They are intended to change
   * not the appearance of the editor, but to change the appearance of the content.
   * @example
   * ```javascript
   * Jodit.make('#editor', {
   * 		style: {
   * 		 font: '12px Arial',
   * 		 color: '#0c0c0c'
   * 		}
   * });
   * ```
   */
  style: {
    font: '16px Roboto',
    color: '#2c2c2c',
  },
  /**
   *
   * @example
   * ```javascript
   * Jodit.make('#editor', {
   * 		editorStyle: {
   * 		 font: '12px Arial',
   * 		 color: '#0c0c0c'
   * 		}
   * });
   * ```
   */
  containerStyle: {
    font: '16px Roboto',
    color: '#2c2c2c',
  },
  /**
   * Inline editing mode
   */
  inline: false,
  /**
   * Theme (can be "dark")
   * @example
   * ```javascript
   * const editor = Jodit.make(".dark_editor", {
   *      theme: "dark"
   * });
   * ```
   */
  theme: 'default',
  /**
   * Class name that can be appended to the editable area
   */
  editorClassName: 'jodit-editor-input',
  /**
   * Class name that can be appended to the main editor container
   */
  className: 'jodit-editor-container',
  /**
   * Language by default. if `auto` language set by document.documentElement.lang ||
   * (navigator.language && navigator.language.substr(0, 2)) ||
   * (navigator.browserLanguage && navigator.browserLanguage.substr(0, 2)) || 'en'
   *
   * @example
   * ```html
   * <!-- include in you page lang file -->
   * <script src="jodit/lang/de.js"></script>
   * <script>
   * var editor = Jodit.make('.editor', {
   *    language: 'de'
   * });
   * </script>
   * ```
   */
  language: 'en',
  /**
   * Collection of language pack data `{en: {'Type something': 'Type something', ...}}`
   *
   * @example
   * ```javascript
   * const editor = Jodit.make('#editor', {
   *     language: 'ru',
   *     i18n: {
   *         ru: {
   *            'Type something': '–ù–∞—á–Ω–∏—Ç–µ —á—Ç–æ-–ª–∏–±–æ –≤–≤–æ–¥–∏—Ç—å'
   *         }
   *     }
   * });
   * console.log(editor.i18n('Type something')) //–ù–∞—á–Ω–∏—Ç–µ —á—Ç–æ-–ª–∏–±–æ –≤–≤–æ–¥–∏—Ç—å
   * ```
   */
  i18n: {},
  /**
   * Boolean, whether the toolbar should be shown.
   * Alternatively, a valid css-selector-string to use an element as toolbar container.
   */
  toolbar: true,
  /**
   * Boolean, whether the statusbar should be shown.
   */
  statusbar: true,
  height: '50vh',
  maxHeight: 'unset',
  /**
   * After resizing, the set of buttons will change to accommodate different sizes.
   */
  toolbarAdaptive: true,
  /**
   * The list of buttons that appear in the editor's toolbar on large places (‚â• options.sizeLG).
   */
  buttons: [
    {
      group: 'font-style',
      buttons: [],
    },
    {
      group: 'list',
      buttons: [],
    },
    {
      group: 'font',
      buttons: [],
    },
    '---',
    {
      group: 'script',
      buttons: [],
    },
    {
      group: 'media',
      buttons: [],
    },
    '\n',
    // {
    //     group: 'state',
    //     buttons: []
    // },
    {
      group: 'clipboard',
      buttons: [],
    },
    {
      group: 'insert',
      buttons: [],
    },
    {
      group: 'indent',
      buttons: [],
    },
    {
      group: 'color',
      buttons: [],
    },
    {
      group: 'form',
      buttons: [],
    },
    '---',
    {
      group: 'history',
      buttons: [],
    },
    {
      group: 'search',
      buttons: [],
    },
    {
      group: 'source',
      buttons: [],
    },
    {
      group: 'other',
      buttons: [],
    },
    {
      group: 'info',
      buttons: [],
    },
  ],
  /**
   * The list of buttons that appear in the editor's toolbar for medium-sized spaces (‚â• options.sizeMD).
   */
  buttonsMD: [
    {
      group: 'font-style',
      buttons: [],
    },
    {
      group: 'list',
      buttons: [],
    },
    {
      group: 'font',
      buttons: [],
    },
    '---',
    {
      group: 'media',
      buttons: [],
    },
    '\n',
    // {
    //     group: 'state',
    //     buttons: []
    // },
    {
      group: 'insert',
      buttons: [],
    },
    {
      group: 'indent',
      buttons: [],
    },
    {
      group: 'color',
      buttons: [],
    },
    '---',
    {
      group: 'history',
      buttons: [],
    },
    {
      group: 'other',
      buttons: [],
    },
    '|',
    'dots',
  ],
  /**
   * The list of buttons that appear in the editor's toolbar for small-sized spaces (‚â• options.sizeSM).
   */
  buttonsSM: [
    {
      group: 'font-style',
      buttons: [],
    },
    {
      group: 'list',
      buttons: [],
    },
    '---',
    {
      group: 'font',
      buttons: [],
    },
    '\n',
    // {
    //     group: 'state',
    //     buttons: []
    // },
    {
      group: 'indent',
      buttons: [],
    },
    {
      group: 'color',
      buttons: [],
    },
    '---',
    {
      group: 'history',
      buttons: [],
    },
    '|',
    'dots',
  ],
  /**
   * The list of buttons that appear in the editor's toolbar for extra-small spaces (less than options.sizeSM).
   */
  buttonsXS: [
    {
      group: 'font-style',
      buttons: [],
    },
    {
      group: 'list',
      buttons: [],
    },
    '---',
    {
      group: 'font',
      buttons: [],
    },
    {
      group: 'color',
      buttons: [],
    },
    '---',
    'dots',
  ],
  /**
   * Module for processing download documents and images by Drag and Drop
   * Drag and Drop files
   */
  enableDragAndDropFileToEditor: true,
  uploader: {
    insertImageAsBase64URI: false,
    url: '/api/upload', // Server URL for file upload
    format: 'json',
    method: 'POST',
    isSuccess: (response) => {
      // Response from server
      return response
    },
    process: (response) => {
      // Response from isSuccess
      if (response?.status) {
        return response.data.items || []
      } else {
        return response
      }
    },
    defaultHandlerSuccess: function (response) {
      // Response from process

      const j = this.j || this

      if (response?.success === false) {
        const j = this.j || this
        if (!j) return
        j.message.error('Upload failed')
        return
      }

      if (!j || _.isEmpty(response?.data)) {
        return
      }

      response?.data?.forEach((item) => {
        const url = getResourceUrl(item)
        let element

        if (item?.mimetype?.includes('image/')) {
          element = j.createInside.element('img')
          element.setAttribute('src', url)
          element.setAttribute('alt', item.filename)
          element.setAttribute('title', item.filename)
          j.s.insertImage(element, null, j.o.imageDefaultWidth)
        } else {
          element = j.createInside.element('a')
          element.setAttribute('href', url)
          element.setAttribute('target', '_blank')
          element.setAttribute(
            'style',
            'display: flex; align-items: center; text-decoration: none; color: rgb(32, 33, 36); background-color: rgb(245, 245, 245); padding: 10px; border: 1px solid rgb(221, 221, 221); font-size: 14px; line-height: 20px; width: fit-content;'
          )

          const icon = j.createInside.element('span')
          icon.className = 'file-icon'
          icon.textContent = item?.mimetype?.includes('video/')
            ? 'üéûÔ∏è'
            : item?.mimetype?.includes('audio/')
              ? 'üîä'
              : 'üìÑ'
          icon.setAttribute('style', 'margin-right: 8px; font-size: 1.2em;')

          const fileInfo = j.createInside.element('span')
          fileInfo.textContent = ` ${item.filename} (${item.size})`

          element.appendChild(icon)
          element.appendChild(fileInfo)

          j.s.insertNode(element)
        }

        // case 'video': {
        //     element = j.createInside.element('video')
        //     element.setAttribute('controls', '')
        //     element.setAttribute('style', 'width: 100%;')
        //     const videoSource = j.createInside.element('source')
        //     videoSource.setAttribute('src', url)
        //     videoSource.setAttribute('type', `${item?.file_content}/${item?.file_type}`)
        //     element.appendChild(videoSource)
        //     j.s.insertNode(element)
        //     break
        // }

        // case 'audio': {
        //     element = j.createInside.element('audio')
        //     element.setAttribute('controls', '')
        //     const audioSource = j.createInside.element('source')
        //     audioSource.setAttribute('src', url)
        //     audioSource.setAttribute('type', `${item?.file_content}/${item?.file_type}`)
        //     element.appendChild(audioSource)
        //     j.s.insertNode(element)
        //     break
        // }

        // Add a line break after each element
        const br = j.createInside.element('br')
        j.s.insertNode(br)
      })
    },
    defaultHandlerError: function (e) {
      console.log(e)
      const j = this.j || this
      if (j) {
        j.message.error('Upload failed')
      }
    },
  },
}

export const LANG_VI = {
  'Type something': 'Nh·∫≠p g√¨ ƒë√≥...',
  Advanced: 'N√¢ng cao',
  'About Jodit': 'V·ªÅ Jodit',
  'Jodit Editor': 'Jodit Editor',
  "Jodit User's Guide": 'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Jodit',
  'contains detailed help for using': 'ch·ª©a h∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ c√°ch s·ª≠ d·ª•ng',
  'For information about the license, please go to our website:':
    'ƒê·ªÉ bi·∫øt th√¥ng tin v·ªÅ gi·∫•y ph√©p, vui l√≤ng truy c·∫≠p trang web c·ªßa ch√∫ng t√¥i:',
  'Buy full version': 'Mua phi√™n b·∫£n ƒë·∫ßy ƒë·ªß',
  'Copyright ¬© XDSoft.net - Chupurnov Valeriy. All rights reserved.':
    'B·∫£n quy·ªÅn ¬© XDSoft.net - Chupurnov Valeriy. ƒê√£ ƒëƒÉng k√Ω b·∫£n quy·ªÅn.',
  Anchor: 'Neo',
  'Open in new tab': 'M·ªü trong tab m·ªõi',
  'Open in fullsize': 'M·ªü k√≠ch th∆∞·ªõc ƒë·∫ßy ƒë·ªß',
  'Clear Formatting': 'X√≥a ƒë·ªãnh d·∫°ng',
  'Fill color or set the text color': 'M√†u n·ªÅn ho·∫∑c m√†u ch·ªØ',
  Redo: 'L√†m l·∫°i',
  Undo: 'Ho√†n t√°c',
  Bold: 'In ƒë·∫≠m',
  Italic: 'In nghi√™ng',
  'Insert Unordered List': 'Ch√®n danh s√°ch kh√¥ng th·ª© t·ª±',
  'Insert Ordered List': 'Ch√®n danh s√°ch c√≥ th·ª© t·ª±',
  'Align Center': 'CƒÉn gi·ªØa',
  'Align Justify': 'CƒÉn ƒë·ªÅu',
  'Align Left': 'CƒÉn tr√°i',
  'Align Right': 'CƒÉn ph·∫£i',
  'Insert Horizontal Line': 'Ch√®n ƒë∆∞·ªùng ngang',
  'Insert Image': 'Ch√®n h√¨nh ·∫£nh',
  'Insert file': 'Ch√®n t·ªáp',
  'Insert youtube/vimeo video': 'Ch√®n video youtube/vimeo',
  'Insert link': 'Ch√®n li√™n k·∫øt',
  'Speech Recognize': 'Nh·∫≠n d·∫°ng gi·ªçng n√≥i',
  Sound: '√Çm thanh',
  'Interim Results': 'K·∫øt qu·∫£ t·∫°m th·ªùi',
  Spellcheck: 'Ki·ªÉm tra ch√≠nh t·∫£',
  'Font size': 'K√≠ch th∆∞·ªõc ch·ªØ',
  'Font family': 'Ph√¥ng ch·ªØ',
  'Insert format block': 'Ch√®n kh·ªëi ƒë·ªãnh d·∫°ng',
  'Line height': 'Chi·ªÅu cao d√≤ng',
  Normal: 'B√¨nh th∆∞·ªùng',
  'Heading 1': 'Ti√™u ƒë·ªÅ 1',
  'Heading 2': 'Ti√™u ƒë·ªÅ 2',
  'Heading 3': 'Ti√™u ƒë·ªÅ 3',
  'Heading 4': 'Ti√™u ƒë·ªÅ 4',
  Quote: 'Tr√≠ch d·∫´n',
  Code: 'M√£',
  Insert: 'Ch√®n',
  'Insert table': 'Ch√®n b·∫£ng',
  'Decrease Indent': 'Gi·∫£m th·ª•t l·ªÅ',
  'Increase Indent': 'TƒÉng th·ª•t l·ªÅ',
  'Select Special Character': 'Ch·ªçn k√Ω t·ª± ƒë·∫∑c bi·ªát',
  'Insert Special Character': 'Ch√®n k√Ω t·ª± ƒë·∫∑c bi·ªát',
  'Paint format': 'Sao ch√©p ƒë·ªãnh d·∫°ng',
  'Change mode': 'Thay ƒë·ªïi ch·∫ø ƒë·ªô',
  Margins: 'L·ªÅ',
  top: 'tr√™n',
  right: 'ph·∫£i',
  bottom: 'd∆∞·ªõi',
  left: 'tr√°i',
  Styles: 'Ki·ªÉu CSS',
  Classes: 'L·ªõp CSS',
  Align: 'CƒÉn',
  Right: 'Ph·∫£i',
  Center: 'Gi·ªØa',
  Left: 'Tr√°i',
  '--Not Set--': '--Ch∆∞a ƒë·∫∑t--',
  Src: 'Ngu·ªìn',
  Title: 'Ti√™u ƒë·ªÅ',
  Alternative: 'VƒÉn b·∫£n thay th·∫ø',
  Filter: 'L·ªçc',
  Link: 'Li√™n k·∫øt',
  'Open link in new tab': 'M·ªü li√™n k·∫øt trong tab m·ªõi',
  Image: 'H√¨nh ·∫£nh',
  file: 'T·ªáp',
  'Image properties': 'Thu·ªôc t√≠nh h√¨nh ·∫£nh',
  Cancel: 'H·ªßy',
  Ok: 'ƒê·ªìng √Ω',
  'Your code is similar to HTML. Keep as HTML?': 'M√£ c·ªßa b·∫°n gi·ªëng HTML. Gi·ªØ d∆∞·ªõi d·∫°ng HTML?',
  'Paste as HTML': 'D√°n d∆∞·ªõi d·∫°ng HTML?',
  Keep: 'Gi·ªØ',
  Clean: 'L√†m s·∫°ch',
  'Insert as Text': 'Ch√®n d∆∞·ªõi d·∫°ng vƒÉn b·∫£n',
  'Word Paste Detected': 'Ph√°t hi·ªán d√°n t·ª´ Word',
  'The pasted content is coming from a Microsoft Word/Excel document. Do you want to keep the format or clean it up?':
    'N·ªôi dung d√°n ƒë·∫øn t·ª´ t√†i li·ªáu Microsoft Word/Excel. B·∫°n c√≥ mu·ªën gi·ªØ ƒë·ªãnh d·∫°ng ho·∫∑c l√†m s·∫°ch n√≥?',
  'Insert only Text': 'Ch·ªâ ch√®n vƒÉn b·∫£n',
  'File Browser': 'Tr√¨nh duy·ªát t·ªáp',
  'Error on load list': 'L·ªói khi t·∫£i danh s√°ch',
  'Error on load folders': 'L·ªói khi t·∫£i th∆∞ m·ª•c',
  'Are you sure?': 'B·∫°n c√≥ ch·∫Øc kh√¥ng?',
  'Enter Directory name': 'Nh·∫≠p t√™n th∆∞ m·ª•c',
  'Create directory': 'T·∫°o th∆∞ m·ª•c',
  'type name': 'nh·∫≠p t√™n',
  'Drop image': 'Th·∫£ h√¨nh ·∫£nh',
  'Drop file': 'Th·∫£ t·ªáp',
  'or click': 'ho·∫∑c nh·∫•p',
  'Alternative text': 'VƒÉn b·∫£n thay th·∫ø',
  Browse: 'Duy·ªát',
  Upload: 'T·∫£i l√™n',
  Background: 'N·ªÅn',
  Text: 'VƒÉn b·∫£n',
  Top: 'Tr√™n',
  Middle: 'Gi·ªØa',
  Bottom: 'D∆∞·ªõi',
  'Insert column before': 'Ch√®n c·ªôt tr∆∞·ªõc',
  'Insert column after': 'Ch√®n c·ªôt sau',
  'Insert row above': 'Ch√®n h√†ng tr√™n',
  'Insert row below': 'Ch√®n h√†ng d∆∞·ªõi',
  'Delete table': 'X√≥a b·∫£ng',
  'Delete row': 'X√≥a h√†ng',
  'Delete column': 'X√≥a c·ªôt',
  'Empty cell': '√î tr·ªëng',
  Delete: 'X√≥a',
  'Strike through': 'G·∫°ch ngang',
  Underline: 'G·∫°ch ch√¢n',
  Break: 'Ng·∫Øt',
  'Search for': 'T√¨m ki·∫øm',
  'Replace with': 'Thay th·∫ø b·∫±ng',
  Replace: 'Thay th·∫ø',
  Edit: 'Ch·ªânh s·ª≠a',
  'Vertical align': 'CƒÉn d·ªçc',
  'Horizontal align': 'CƒÉn ngang',
  'Sort by changed': 'S·∫Øp x·∫øp theo thay ƒë·ªïi',
  'Sort by name': 'S·∫Øp x·∫øp theo t√™n',
  'Sort by size': 'S·∫Øp x·∫øp theo k√≠ch th∆∞·ªõc',
  'Add folder': 'Th√™m th∆∞ m·ª•c',
  Split: 'Chia',
  'Split vertical': 'Chia d·ªçc',
  'Split horizontal': 'Chia ngang',
  Merge: 'G·ªôp',
  'Add column': 'Th√™m c·ªôt',
  'Add row': 'Th√™m h√†ng',
  Border: 'Vi·ªÅn',
  'Embed code': 'Nh√∫ng m√£',
  Update: 'C·∫≠p nh·∫≠t',
  superscript: 'ch·ªâ s·ªë tr√™n',
  subscript: 'ch·ªâ s·ªë d∆∞·ªõi',
  'Cut selection': 'C·∫Øt l·ª±a ch·ªçn',
  Paste: 'D√°n',
  'Choose Content to Paste': 'Ch·ªçn n·ªôi dung ƒë·ªÉ d√°n',
  'Chars: %d': 'K√Ω t·ª±: %d',
  'Words: %d': 'T·ª´: %d',
  All: 'T·∫•t c·∫£',
  'Select %s': 'Ch·ªçn: %s',
  'Select all': 'Ch·ªçn t·∫•t c·∫£',
  source: 'HTML',
  bold: 'ƒë·∫≠m',
  italic: 'nghi√™ng',
  brush: 'Ch·ªïi',
  link: 'Li√™n k·∫øt',
  undo: 'ho√†n t√°c',
  redo: 'l√†m l·∫°i',
  table: 'B·∫£ng',
  image: 'H√¨nh ·∫£nh',
  eraser: 'T·∫©y',
  paragraph: 'ƒêo·∫°n vƒÉn',
  fontsize: 'K√≠ch th∆∞·ªõc ch·ªØ',
  video: 'Video',
  font: 'Ph√¥ng ch·ªØ',
  about: 'V·ªÅ',
  print: 'In',
  underline: 'g·∫°ch ch√¢n',
  strikethrough: 'g·∫°ch ngang',
  indent: 'th·ª•t l·ªÅ',
  outdent: 'gi·∫£m th·ª•t l·ªÅ',
  fullsize: 'K√≠ch th∆∞·ªõc ƒë·∫ßy ƒë·ªß',
  shrink: 'Thu nh·ªè',
  hr: 'ƒë∆∞·ªùng ngang',
  ul: 'danh s√°ch kh√¥ng th·ª© t·ª±',
  ol: 'danh s√°ch c√≥ th·ª© t·ª±',
  cut: 'C·∫Øt',
  selectall: 'Ch·ªçn t·∫•t c·∫£',
  'Open link': 'M·ªü li√™n k·∫øt',
  'Edit link': 'Ch·ªânh s·ª≠a li√™n k·∫øt',
  'No follow': 'Kh√¥ng theo d√µi',
  Unlink: 'B·ªè li√™n k·∫øt',
  Eye: 'Xem',
  pencil: 'Ch·ªânh s·ª≠a',
  ' URL': 'URL',
  Reset: 'ƒê·∫∑t l·∫°i',
  Save: 'L∆∞u',
  'Save as ...': 'L∆∞u d∆∞·ªõi d·∫°ng...',
  Resize: 'Thay ƒë·ªïi k√≠ch th∆∞·ªõc',
  Crop: 'C·∫Øt',
  Width: 'Chi·ªÅu r·ªông',
  Height: 'Chi·ªÅu cao',
  'Keep Aspect Ratio': 'Gi·ªØ t·ª∑ l·ªá khung h√¨nh',
  Yes: 'C√≥',
  No: 'Kh√¥ng',
  Remove: 'G·ª° b·ªè',
  Select: 'Ch·ªçn',
  'You can only edit your own images. Download this image on the host?':
    'B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªânh s·ª≠a h√¨nh ·∫£nh c·ªßa ch√≠nh m√¨nh. T·∫£i h√¨nh ·∫£nh n√†y l√™n m√°y ch·ªß?',
  'The image has been successfully uploaded to the host!':
    'H√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n m√°y ch·ªß th√†nh c√¥ng!',
  palette: 'b·∫£ng m√†u',
  'There are no files': 'Kh√¥ng c√≥ t·ªáp n√†o trong th∆∞ m·ª•c n√†y.',
  Rename: 'ƒë·ªïi t√™n',
  'Enter new name': 'Nh·∫≠p t√™n m·ªõi',
  preview: 'xem tr∆∞·ªõc',
  download: 'T·∫£i v·ªÅ',
  'Paste from clipboard': 'D√°n t·ª´ b·∫£ng t·∫°m',
  "Your browser doesn't support direct access to the clipboard.":
    'Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ truy c·∫≠p tr·ª±c ti·∫øp v√†o b·∫£ng t·∫°m.',
  'Copy selection': 'Sao ch√©p l·ª±a ch·ªçn',
  copy: 'sao ch√©p',
  'Border radius': 'B√°n k√≠nh vi·ªÅn',
  'Show all': 'Hi·ªÉn th·ªã t·∫•t c·∫£',
  Apply: '√Åp d·ª•ng',
  'Please fill out this field': 'Vui l√≤ng ƒëi·ªÅn v√†o tr∆∞·ªùng n√†y',
  'Please enter a web address': 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ web',
  Default: 'M·∫∑c ƒë·ªãnh',
  Circle: 'H√¨nh tr√≤n',
  Dot: 'Ch·∫•m',
  Quadrate: 'H√¨nh vu√¥ng',
  'Lower Alpha': 'Ch·ªØ th∆∞·ªùng',
  'Lower Greek': 'Ch·ªØ Hy L·∫°p th∆∞·ªùng',
  'Lower Roman': 'S·ªë La M√£ th∆∞·ªùng',
  'Upper Alpha': 'Ch·ªØ hoa',
  'Upper Roman': 'S·ªë La M√£ hoa',
  Find: 'T√¨m',
  'Find Previous': 'T√¨m tr∆∞·ªõc',
  'Find Next': 'T√¨m ti·∫øp',
  'Insert className': 'Ch√®n t√™n l·ªõp',
  'Press Alt for custom resizing': 'Nh·∫•n Alt ƒë·ªÉ thay ƒë·ªïi k√≠ch th∆∞·ªõc t√πy ch·ªânh',
}
